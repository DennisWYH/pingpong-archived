// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"pingpong2/ent/sentense"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Sentense is the model entity for the Sentense schema.
type Sentense struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Chinese holds the value of the "chinese" field.
	Chinese string `json:"chinese,omitempty"`
	// Pinyin holds the value of the "pinyin" field.
	Pinyin string `json:"pinyin,omitempty"`
	// English holds the value of the "english" field.
	English string `json:"english,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SentenseQuery when eager-loading is set.
	Edges SentenseEdges `json:"edges"`
}

// SentenseEdges holds the relations/edges for other nodes in the graph.
type SentenseEdges struct {
	// Reads holds the value of the reads edge.
	Reads []*Read `json:"reads,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReadsOrErr returns the Reads value or an error if the edge
// was not loaded in eager-loading.
func (e SentenseEdges) ReadsOrErr() ([]*Read, error) {
	if e.loadedTypes[0] {
		return e.Reads, nil
	}
	return nil, &NotLoadedError{edge: "reads"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sentense) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sentense.FieldID:
			values[i] = new(sql.NullInt64)
		case sentense.FieldChinese, sentense.FieldPinyin, sentense.FieldEnglish:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Sentense", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sentense fields.
func (s *Sentense) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sentense.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sentense.FieldChinese:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chinese", values[i])
			} else if value.Valid {
				s.Chinese = value.String
			}
		case sentense.FieldPinyin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pinyin", values[i])
			} else if value.Valid {
				s.Pinyin = value.String
			}
		case sentense.FieldEnglish:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field english", values[i])
			} else if value.Valid {
				s.English = value.String
			}
		}
	}
	return nil
}

// QueryReads queries the "reads" edge of the Sentense entity.
func (s *Sentense) QueryReads() *ReadQuery {
	return (&SentenseClient{config: s.config}).QueryReads(s)
}

// Update returns a builder for updating this Sentense.
// Note that you need to call Sentense.Unwrap() before calling this method if this Sentense
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sentense) Update() *SentenseUpdateOne {
	return (&SentenseClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Sentense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sentense) Unwrap() *Sentense {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sentense is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sentense) String() string {
	var builder strings.Builder
	builder.WriteString("Sentense(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", chinese=")
	builder.WriteString(s.Chinese)
	builder.WriteString(", pinyin=")
	builder.WriteString(s.Pinyin)
	builder.WriteString(", english=")
	builder.WriteString(s.English)
	builder.WriteByte(')')
	return builder.String()
}

// Sentenses is a parsable slice of Sentense.
type Sentenses []*Sentense

func (s Sentenses) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
