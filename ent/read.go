// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"pingpong2/ent/read"
	"pingpong2/ent/sentense"
	"pingpong2/ent/user"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Read is the model entity for the Read schema.
type Read struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Result holds the value of the "result" field.
	Result int `json:"result,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReadQuery when eager-loading is set.
	Edges          ReadEdges `json:"edges"`
	sentense_reads *int
	user_reads     *int
}

// ReadEdges holds the relations/edges for other nodes in the graph.
type ReadEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Sentence holds the value of the sentence edge.
	Sentence *Sentense `json:"sentence,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReadEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SentenceOrErr returns the Sentence value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReadEdges) SentenceOrErr() (*Sentense, error) {
	if e.loadedTypes[1] {
		if e.Sentence == nil {
			// The edge sentence was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sentense.Label}
		}
		return e.Sentence, nil
	}
	return nil, &NotLoadedError{edge: "sentence"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Read) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case read.FieldID, read.FieldResult:
			values[i] = new(sql.NullInt64)
		case read.ForeignKeys[0]: // sentense_reads
			values[i] = new(sql.NullInt64)
		case read.ForeignKeys[1]: // user_reads
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Read", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Read fields.
func (r *Read) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case read.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case read.FieldResult:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				r.Result = int(value.Int64)
			}
		case read.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sentense_reads", value)
			} else if value.Valid {
				r.sentense_reads = new(int)
				*r.sentense_reads = int(value.Int64)
			}
		case read.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_reads", value)
			} else if value.Valid {
				r.user_reads = new(int)
				*r.user_reads = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Read entity.
func (r *Read) QueryUser() *UserQuery {
	return (&ReadClient{config: r.config}).QueryUser(r)
}

// QuerySentence queries the "sentence" edge of the Read entity.
func (r *Read) QuerySentence() *SentenseQuery {
	return (&ReadClient{config: r.config}).QuerySentence(r)
}

// Update returns a builder for updating this Read.
// Note that you need to call Read.Unwrap() before calling this method if this Read
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Read) Update() *ReadUpdateOne {
	return (&ReadClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Read entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Read) Unwrap() *Read {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Read is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Read) String() string {
	var builder strings.Builder
	builder.WriteString("Read(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", result=")
	builder.WriteString(fmt.Sprintf("%v", r.Result))
	builder.WriteByte(')')
	return builder.String()
}

// Reads is a parsable slice of Read.
type Reads []*Read

func (r Reads) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
