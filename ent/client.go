// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"pingpong2/ent/migrate"

	"pingpong2/ent/read"
	"pingpong2/ent/sentense"
	"pingpong2/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Read is the client for interacting with the Read builders.
	Read *ReadClient
	// Sentense is the client for interacting with the Sentense builders.
	Sentense *SentenseClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Read = NewReadClient(c.config)
	c.Sentense = NewSentenseClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Read:     NewReadClient(cfg),
		Sentense: NewSentenseClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Read:     NewReadClient(cfg),
		Sentense: NewSentenseClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Read.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Read.Use(hooks...)
	c.Sentense.Use(hooks...)
	c.User.Use(hooks...)
}

// ReadClient is a client for the Read schema.
type ReadClient struct {
	config
}

// NewReadClient returns a client for the Read from the given config.
func NewReadClient(c config) *ReadClient {
	return &ReadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `read.Hooks(f(g(h())))`.
func (c *ReadClient) Use(hooks ...Hook) {
	c.hooks.Read = append(c.hooks.Read, hooks...)
}

// Create returns a create builder for Read.
func (c *ReadClient) Create() *ReadCreate {
	mutation := newReadMutation(c.config, OpCreate)
	return &ReadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Read entities.
func (c *ReadClient) CreateBulk(builders ...*ReadCreate) *ReadCreateBulk {
	return &ReadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Read.
func (c *ReadClient) Update() *ReadUpdate {
	mutation := newReadMutation(c.config, OpUpdate)
	return &ReadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReadClient) UpdateOne(r *Read) *ReadUpdateOne {
	mutation := newReadMutation(c.config, OpUpdateOne, withRead(r))
	return &ReadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReadClient) UpdateOneID(id int) *ReadUpdateOne {
	mutation := newReadMutation(c.config, OpUpdateOne, withReadID(id))
	return &ReadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Read.
func (c *ReadClient) Delete() *ReadDelete {
	mutation := newReadMutation(c.config, OpDelete)
	return &ReadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReadClient) DeleteOne(r *Read) *ReadDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReadClient) DeleteOneID(id int) *ReadDeleteOne {
	builder := c.Delete().Where(read.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReadDeleteOne{builder}
}

// Query returns a query builder for Read.
func (c *ReadClient) Query() *ReadQuery {
	return &ReadQuery{
		config: c.config,
	}
}

// Get returns a Read entity by its id.
func (c *ReadClient) Get(ctx context.Context, id int) (*Read, error) {
	return c.Query().Where(read.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReadClient) GetX(ctx context.Context, id int) *Read {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Read.
func (c *ReadClient) QueryUser(r *Read) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(read.Table, read.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, read.UserTable, read.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySentence queries the sentence edge of a Read.
func (c *ReadClient) QuerySentence(r *Read) *SentenseQuery {
	query := &SentenseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(read.Table, read.FieldID, id),
			sqlgraph.To(sentense.Table, sentense.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, read.SentenceTable, read.SentenceColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReadClient) Hooks() []Hook {
	return c.hooks.Read
}

// SentenseClient is a client for the Sentense schema.
type SentenseClient struct {
	config
}

// NewSentenseClient returns a client for the Sentense from the given config.
func NewSentenseClient(c config) *SentenseClient {
	return &SentenseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sentense.Hooks(f(g(h())))`.
func (c *SentenseClient) Use(hooks ...Hook) {
	c.hooks.Sentense = append(c.hooks.Sentense, hooks...)
}

// Create returns a create builder for Sentense.
func (c *SentenseClient) Create() *SentenseCreate {
	mutation := newSentenseMutation(c.config, OpCreate)
	return &SentenseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sentense entities.
func (c *SentenseClient) CreateBulk(builders ...*SentenseCreate) *SentenseCreateBulk {
	return &SentenseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sentense.
func (c *SentenseClient) Update() *SentenseUpdate {
	mutation := newSentenseMutation(c.config, OpUpdate)
	return &SentenseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SentenseClient) UpdateOne(s *Sentense) *SentenseUpdateOne {
	mutation := newSentenseMutation(c.config, OpUpdateOne, withSentense(s))
	return &SentenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SentenseClient) UpdateOneID(id int) *SentenseUpdateOne {
	mutation := newSentenseMutation(c.config, OpUpdateOne, withSentenseID(id))
	return &SentenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sentense.
func (c *SentenseClient) Delete() *SentenseDelete {
	mutation := newSentenseMutation(c.config, OpDelete)
	return &SentenseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SentenseClient) DeleteOne(s *Sentense) *SentenseDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SentenseClient) DeleteOneID(id int) *SentenseDeleteOne {
	builder := c.Delete().Where(sentense.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SentenseDeleteOne{builder}
}

// Query returns a query builder for Sentense.
func (c *SentenseClient) Query() *SentenseQuery {
	return &SentenseQuery{
		config: c.config,
	}
}

// Get returns a Sentense entity by its id.
func (c *SentenseClient) Get(ctx context.Context, id int) (*Sentense, error) {
	return c.Query().Where(sentense.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SentenseClient) GetX(ctx context.Context, id int) *Sentense {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryReads queries the reads edge of a Sentense.
func (c *SentenseClient) QueryReads(s *Sentense) *ReadQuery {
	query := &ReadQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sentense.Table, sentense.FieldID, id),
			sqlgraph.To(read.Table, read.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sentense.ReadsTable, sentense.ReadsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SentenseClient) Hooks() []Hook {
	return c.hooks.Sentense
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryReads queries the reads edge of a User.
func (c *UserClient) QueryReads(u *User) *ReadQuery {
	query := &ReadQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(read.Table, read.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReadsTable, user.ReadsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
