// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pingpong2/ent/predicate"
	"pingpong2/ent/read"
	"pingpong2/ent/sentense"
	"pingpong2/ent/user"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRead     = "Read"
	TypeSentense = "Sentense"
	TypeUser     = "User"
)

// ReadMutation represents an operation that mutates the Read nodes in the graph.
type ReadMutation struct {
	config
	op              Op
	typ             string
	id              *int
	result          *int
	addresult       *int
	clearedFields   map[string]struct{}
	user            *int
	cleareduser     bool
	sentence        *int
	clearedsentence bool
	done            bool
	oldValue        func(context.Context) (*Read, error)
	predicates      []predicate.Read
}

var _ ent.Mutation = (*ReadMutation)(nil)

// readOption allows management of the mutation configuration using functional options.
type readOption func(*ReadMutation)

// newReadMutation creates new mutation for the Read entity.
func newReadMutation(c config, op Op, opts ...readOption) *ReadMutation {
	m := &ReadMutation{
		config:        c,
		op:            op,
		typ:           TypeRead,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReadID sets the ID field of the mutation.
func withReadID(id int) readOption {
	return func(m *ReadMutation) {
		var (
			err   error
			once  sync.Once
			value *Read
		)
		m.oldValue = func(ctx context.Context) (*Read, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Read.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRead sets the old Read of the mutation.
func withRead(node *Read) readOption {
	return func(m *ReadMutation) {
		m.oldValue = func(context.Context) (*Read, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReadMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReadMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReadMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReadMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Read.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ReadMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ReadMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Read entity.
// If the Read object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ReadMutation) ResetUserID() {
	m.user = nil
}

// SetSentenceID sets the "sentence_id" field.
func (m *ReadMutation) SetSentenceID(i int) {
	m.sentence = &i
}

// SentenceID returns the value of the "sentence_id" field in the mutation.
func (m *ReadMutation) SentenceID() (r int, exists bool) {
	v := m.sentence
	if v == nil {
		return
	}
	return *v, true
}

// OldSentenceID returns the old "sentence_id" field's value of the Read entity.
// If the Read object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadMutation) OldSentenceID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentenceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentenceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentenceID: %w", err)
	}
	return oldValue.SentenceID, nil
}

// ResetSentenceID resets all changes to the "sentence_id" field.
func (m *ReadMutation) ResetSentenceID() {
	m.sentence = nil
}

// SetResult sets the "result" field.
func (m *ReadMutation) SetResult(i int) {
	m.result = &i
	m.addresult = nil
}

// Result returns the value of the "result" field in the mutation.
func (m *ReadMutation) Result() (r int, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Read entity.
// If the Read object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadMutation) OldResult(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// AddResult adds i to the "result" field.
func (m *ReadMutation) AddResult(i int) {
	if m.addresult != nil {
		*m.addresult += i
	} else {
		m.addresult = &i
	}
}

// AddedResult returns the value that was added to the "result" field in this mutation.
func (m *ReadMutation) AddedResult() (r int, exists bool) {
	v := m.addresult
	if v == nil {
		return
	}
	return *v, true
}

// ResetResult resets all changes to the "result" field.
func (m *ReadMutation) ResetResult() {
	m.result = nil
	m.addresult = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ReadMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ReadMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ReadMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ReadMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearSentence clears the "sentence" edge to the Sentense entity.
func (m *ReadMutation) ClearSentence() {
	m.clearedsentence = true
}

// SentenceCleared reports if the "sentence" edge to the Sentense entity was cleared.
func (m *ReadMutation) SentenceCleared() bool {
	return m.clearedsentence
}

// SentenceIDs returns the "sentence" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SentenceID instead. It exists only for internal usage by the builders.
func (m *ReadMutation) SentenceIDs() (ids []int) {
	if id := m.sentence; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSentence resets all changes to the "sentence" edge.
func (m *ReadMutation) ResetSentence() {
	m.sentence = nil
	m.clearedsentence = false
}

// Where appends a list predicates to the ReadMutation builder.
func (m *ReadMutation) Where(ps ...predicate.Read) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReadMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Read).
func (m *ReadMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReadMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, read.FieldUserID)
	}
	if m.sentence != nil {
		fields = append(fields, read.FieldSentenceID)
	}
	if m.result != nil {
		fields = append(fields, read.FieldResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReadMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case read.FieldUserID:
		return m.UserID()
	case read.FieldSentenceID:
		return m.SentenceID()
	case read.FieldResult:
		return m.Result()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReadMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case read.FieldUserID:
		return m.OldUserID(ctx)
	case read.FieldSentenceID:
		return m.OldSentenceID(ctx)
	case read.FieldResult:
		return m.OldResult(ctx)
	}
	return nil, fmt.Errorf("unknown Read field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReadMutation) SetField(name string, value ent.Value) error {
	switch name {
	case read.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case read.FieldSentenceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentenceID(v)
		return nil
	case read.FieldResult:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	}
	return fmt.Errorf("unknown Read field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReadMutation) AddedFields() []string {
	var fields []string
	if m.addresult != nil {
		fields = append(fields, read.FieldResult)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReadMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case read.FieldResult:
		return m.AddedResult()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReadMutation) AddField(name string, value ent.Value) error {
	switch name {
	case read.FieldResult:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddResult(v)
		return nil
	}
	return fmt.Errorf("unknown Read numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReadMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReadMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReadMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Read nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReadMutation) ResetField(name string) error {
	switch name {
	case read.FieldUserID:
		m.ResetUserID()
		return nil
	case read.FieldSentenceID:
		m.ResetSentenceID()
		return nil
	case read.FieldResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown Read field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReadMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, read.EdgeUser)
	}
	if m.sentence != nil {
		edges = append(edges, read.EdgeSentence)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReadMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case read.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case read.EdgeSentence:
		if id := m.sentence; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReadMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReadMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReadMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, read.EdgeUser)
	}
	if m.clearedsentence {
		edges = append(edges, read.EdgeSentence)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReadMutation) EdgeCleared(name string) bool {
	switch name {
	case read.EdgeUser:
		return m.cleareduser
	case read.EdgeSentence:
		return m.clearedsentence
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReadMutation) ClearEdge(name string) error {
	switch name {
	case read.EdgeUser:
		m.ClearUser()
		return nil
	case read.EdgeSentence:
		m.ClearSentence()
		return nil
	}
	return fmt.Errorf("unknown Read unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReadMutation) ResetEdge(name string) error {
	switch name {
	case read.EdgeUser:
		m.ResetUser()
		return nil
	case read.EdgeSentence:
		m.ResetSentence()
		return nil
	}
	return fmt.Errorf("unknown Read edge %s", name)
}

// SentenseMutation represents an operation that mutates the Sentense nodes in the graph.
type SentenseMutation struct {
	config
	op            Op
	typ           string
	id            *int
	chinese       *string
	pinyin        *string
	english       *string
	clearedFields map[string]struct{}
	reads         map[int]struct{}
	removedreads  map[int]struct{}
	clearedreads  bool
	done          bool
	oldValue      func(context.Context) (*Sentense, error)
	predicates    []predicate.Sentense
}

var _ ent.Mutation = (*SentenseMutation)(nil)

// sentenseOption allows management of the mutation configuration using functional options.
type sentenseOption func(*SentenseMutation)

// newSentenseMutation creates new mutation for the Sentense entity.
func newSentenseMutation(c config, op Op, opts ...sentenseOption) *SentenseMutation {
	m := &SentenseMutation{
		config:        c,
		op:            op,
		typ:           TypeSentense,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSentenseID sets the ID field of the mutation.
func withSentenseID(id int) sentenseOption {
	return func(m *SentenseMutation) {
		var (
			err   error
			once  sync.Once
			value *Sentense
		)
		m.oldValue = func(ctx context.Context) (*Sentense, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sentense.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSentense sets the old Sentense of the mutation.
func withSentense(node *Sentense) sentenseOption {
	return func(m *SentenseMutation) {
		m.oldValue = func(context.Context) (*Sentense, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SentenseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SentenseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SentenseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SentenseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sentense.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChinese sets the "chinese" field.
func (m *SentenseMutation) SetChinese(s string) {
	m.chinese = &s
}

// Chinese returns the value of the "chinese" field in the mutation.
func (m *SentenseMutation) Chinese() (r string, exists bool) {
	v := m.chinese
	if v == nil {
		return
	}
	return *v, true
}

// OldChinese returns the old "chinese" field's value of the Sentense entity.
// If the Sentense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SentenseMutation) OldChinese(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChinese is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChinese requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChinese: %w", err)
	}
	return oldValue.Chinese, nil
}

// ResetChinese resets all changes to the "chinese" field.
func (m *SentenseMutation) ResetChinese() {
	m.chinese = nil
}

// SetPinyin sets the "pinyin" field.
func (m *SentenseMutation) SetPinyin(s string) {
	m.pinyin = &s
}

// Pinyin returns the value of the "pinyin" field in the mutation.
func (m *SentenseMutation) Pinyin() (r string, exists bool) {
	v := m.pinyin
	if v == nil {
		return
	}
	return *v, true
}

// OldPinyin returns the old "pinyin" field's value of the Sentense entity.
// If the Sentense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SentenseMutation) OldPinyin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPinyin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPinyin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPinyin: %w", err)
	}
	return oldValue.Pinyin, nil
}

// ResetPinyin resets all changes to the "pinyin" field.
func (m *SentenseMutation) ResetPinyin() {
	m.pinyin = nil
}

// SetEnglish sets the "english" field.
func (m *SentenseMutation) SetEnglish(s string) {
	m.english = &s
}

// English returns the value of the "english" field in the mutation.
func (m *SentenseMutation) English() (r string, exists bool) {
	v := m.english
	if v == nil {
		return
	}
	return *v, true
}

// OldEnglish returns the old "english" field's value of the Sentense entity.
// If the Sentense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SentenseMutation) OldEnglish(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnglish is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnglish requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnglish: %w", err)
	}
	return oldValue.English, nil
}

// ResetEnglish resets all changes to the "english" field.
func (m *SentenseMutation) ResetEnglish() {
	m.english = nil
}

// AddReadIDs adds the "reads" edge to the Read entity by ids.
func (m *SentenseMutation) AddReadIDs(ids ...int) {
	if m.reads == nil {
		m.reads = make(map[int]struct{})
	}
	for i := range ids {
		m.reads[ids[i]] = struct{}{}
	}
}

// ClearReads clears the "reads" edge to the Read entity.
func (m *SentenseMutation) ClearReads() {
	m.clearedreads = true
}

// ReadsCleared reports if the "reads" edge to the Read entity was cleared.
func (m *SentenseMutation) ReadsCleared() bool {
	return m.clearedreads
}

// RemoveReadIDs removes the "reads" edge to the Read entity by IDs.
func (m *SentenseMutation) RemoveReadIDs(ids ...int) {
	if m.removedreads == nil {
		m.removedreads = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reads, ids[i])
		m.removedreads[ids[i]] = struct{}{}
	}
}

// RemovedReads returns the removed IDs of the "reads" edge to the Read entity.
func (m *SentenseMutation) RemovedReadsIDs() (ids []int) {
	for id := range m.removedreads {
		ids = append(ids, id)
	}
	return
}

// ReadsIDs returns the "reads" edge IDs in the mutation.
func (m *SentenseMutation) ReadsIDs() (ids []int) {
	for id := range m.reads {
		ids = append(ids, id)
	}
	return
}

// ResetReads resets all changes to the "reads" edge.
func (m *SentenseMutation) ResetReads() {
	m.reads = nil
	m.clearedreads = false
	m.removedreads = nil
}

// Where appends a list predicates to the SentenseMutation builder.
func (m *SentenseMutation) Where(ps ...predicate.Sentense) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SentenseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Sentense).
func (m *SentenseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SentenseMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.chinese != nil {
		fields = append(fields, sentense.FieldChinese)
	}
	if m.pinyin != nil {
		fields = append(fields, sentense.FieldPinyin)
	}
	if m.english != nil {
		fields = append(fields, sentense.FieldEnglish)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SentenseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sentense.FieldChinese:
		return m.Chinese()
	case sentense.FieldPinyin:
		return m.Pinyin()
	case sentense.FieldEnglish:
		return m.English()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SentenseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sentense.FieldChinese:
		return m.OldChinese(ctx)
	case sentense.FieldPinyin:
		return m.OldPinyin(ctx)
	case sentense.FieldEnglish:
		return m.OldEnglish(ctx)
	}
	return nil, fmt.Errorf("unknown Sentense field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SentenseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sentense.FieldChinese:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChinese(v)
		return nil
	case sentense.FieldPinyin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPinyin(v)
		return nil
	case sentense.FieldEnglish:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnglish(v)
		return nil
	}
	return fmt.Errorf("unknown Sentense field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SentenseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SentenseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SentenseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Sentense numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SentenseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SentenseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SentenseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Sentense nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SentenseMutation) ResetField(name string) error {
	switch name {
	case sentense.FieldChinese:
		m.ResetChinese()
		return nil
	case sentense.FieldPinyin:
		m.ResetPinyin()
		return nil
	case sentense.FieldEnglish:
		m.ResetEnglish()
		return nil
	}
	return fmt.Errorf("unknown Sentense field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SentenseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.reads != nil {
		edges = append(edges, sentense.EdgeReads)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SentenseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sentense.EdgeReads:
		ids := make([]ent.Value, 0, len(m.reads))
		for id := range m.reads {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SentenseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedreads != nil {
		edges = append(edges, sentense.EdgeReads)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SentenseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sentense.EdgeReads:
		ids := make([]ent.Value, 0, len(m.removedreads))
		for id := range m.removedreads {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SentenseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedreads {
		edges = append(edges, sentense.EdgeReads)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SentenseMutation) EdgeCleared(name string) bool {
	switch name {
	case sentense.EdgeReads:
		return m.clearedreads
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SentenseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Sentense unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SentenseMutation) ResetEdge(name string) error {
	switch name {
	case sentense.EdgeReads:
		m.ResetReads()
		return nil
	}
	return fmt.Errorf("unknown Sentense edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	password      *string
	clearedFields map[string]struct{}
	reads         map[int]struct{}
	removedreads  map[int]struct{}
	clearedreads  bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddReadIDs adds the "reads" edge to the Read entity by ids.
func (m *UserMutation) AddReadIDs(ids ...int) {
	if m.reads == nil {
		m.reads = make(map[int]struct{})
	}
	for i := range ids {
		m.reads[ids[i]] = struct{}{}
	}
}

// ClearReads clears the "reads" edge to the Read entity.
func (m *UserMutation) ClearReads() {
	m.clearedreads = true
}

// ReadsCleared reports if the "reads" edge to the Read entity was cleared.
func (m *UserMutation) ReadsCleared() bool {
	return m.clearedreads
}

// RemoveReadIDs removes the "reads" edge to the Read entity by IDs.
func (m *UserMutation) RemoveReadIDs(ids ...int) {
	if m.removedreads == nil {
		m.removedreads = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reads, ids[i])
		m.removedreads[ids[i]] = struct{}{}
	}
}

// RemovedReads returns the removed IDs of the "reads" edge to the Read entity.
func (m *UserMutation) RemovedReadsIDs() (ids []int) {
	for id := range m.removedreads {
		ids = append(ids, id)
	}
	return
}

// ReadsIDs returns the "reads" edge IDs in the mutation.
func (m *UserMutation) ReadsIDs() (ids []int) {
	for id := range m.reads {
		ids = append(ids, id)
	}
	return
}

// ResetReads resets all changes to the "reads" edge.
func (m *UserMutation) ResetReads() {
	m.reads = nil
	m.clearedreads = false
	m.removedreads = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.reads != nil {
		edges = append(edges, user.EdgeReads)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeReads:
		ids := make([]ent.Value, 0, len(m.reads))
		for id := range m.reads {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedreads != nil {
		edges = append(edges, user.EdgeReads)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeReads:
		ids := make([]ent.Value, 0, len(m.removedreads))
		for id := range m.removedreads {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedreads {
		edges = append(edges, user.EdgeReads)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeReads:
		return m.clearedreads
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeReads:
		m.ResetReads()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
